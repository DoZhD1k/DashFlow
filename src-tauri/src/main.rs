#![cfg_attr(not(debug_assertions), windows_subsystem = "windows")]

use dotenv::dotenv;
use tauri::{
    AppHandle, Manager,
    menu::{Menu, MenuItem},
    tray::{TrayIconBuilder, TrayIconEvent, MouseButton, MouseButtonState},
};
use tauri_plugin_single_instance::init as SingleInstance;
use tauri_plugin_autostart::{MacosLauncher, ManagerExt};
use tauri_plugin_updater::UpdaterExt;

mod commands;
mod db;
mod games;
mod music;
mod window_logger {
    pub fn log_window_loading() {
        println!("üîÑ –û–∫–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...");
    }

    pub fn log_window_loaded() {
        println!("‚úÖ –û–∫–Ω–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ");
    }
}

fn main() {
    dotenv().ok();

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î –¥–æ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    if let Err(err) = init_db() {
        eprintln!("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {:?}", err);
        // –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ –ë–î
        std::process::exit(1);
    }

    println!("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞");

    tauri::Builder::default()
        .plugin(tauri_plugin_updater::Builder::new().build()) // ‚úÖ –í–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        .plugin(tauri_plugin_autostart::init(
            MacosLauncher::LaunchAgent,
            Some(vec!["--flag1", "--flag2"]),
        ))
        .plugin(tauri_plugin_shell::init())
        .plugin(SingleInstance(|_app, _args, _cwd| {
            println!("‚ö†Ô∏è –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–æ!");
        }))
        .setup(|app| {
            let app_handle = app.handle().clone(); // ‚úÖ –ö–ª–æ–Ω–∏—Ä—É–µ–º AppHandle
            println!("–û–∫–Ω–æ –∑–∞–≥—Ä—É–∑–∏–ª–æ—Å—å");
            // üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
            tauri::async_runtime::spawn(async move {
                match update(app_handle).await {
                    Ok(_) => println!("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ."),
                    Err(e) => eprintln!("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {:?}", e),
                }
            });

            // ‚úÖ –ö–ª–æ–Ω–∏—Ä—É–µ–º AppHandle
            let app_handle = app.handle().clone();

            // üî• –°–æ–∑–¥–∞—ë–º —Ç—Ä–µ–π-–º–µ–Ω—é
            let quit_item = MenuItem::with_id(&app_handle, "quit", "–í—ã—Ö–æ–¥", true, None::<&str>)?;
            let tray_menu = Menu::with_items(&app_handle, &[&quit_item])?;

            let tray = TrayIconBuilder::new()
                .menu(&tray_menu)
                .show_menu_on_left_click(true)
                .on_menu_event(|app, event| match event.id.as_ref() {
                    "quit" => {
                        println!("–í—ã—Ö–æ–¥");
                        app.exit(0);
                    }
                    _ => {
                        println!("–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –º–µ–Ω—é: {:?}", event.id);
                    }
                })
                .on_tray_icon_event(|tray, event| match event {
                    TrayIconEvent::Click {
                        button: MouseButton::Left,
                        button_state: MouseButtonState::Up,
                        ..
                    } => {
                        println!("–õ–µ–≤—ã–π –∫–ª–∏–∫ –ø–æ –∏–∫–æ–Ω–∫–µ —Ç—Ä–µ—è");
                        let app = tray.app_handle();
                        if let Some(window) = app.get_webview_window("main") {
                            let _ = window.show();
                            let _ = window.set_focus();
                        }
                    }
                    _ => {
                        println!("–î—Ä—É–≥–æ–µ —Å–æ–±—ã—Ç–∏–µ —Ç—Ä–µ—è: {:?}", event);
                    }
                })
                .build(app)?;

            Ok(())
        })
        .invoke_handler(tauri::generate_handler![
            commands::load_db,
            commands::create_project,
            commands::list_projects,
            commands::add_todo,
            commands::get_todos,
            commands::update_todo,
            commands::delete_todo,
            commands::scan_and_fetch_games,
            commands::launch_game,
            commands::open_url,
            commands::open_in_vscode,
            commands::get_cpu_usage,
            commands::get_memory_usage,
            commands::get_process_count,
            commands::get_uptime,
            commands::get_battery_info,
            commands::lock,
            commands::restart,
            commands::sleep_mode,
            commands::shutdown,
            commands::open_task_manager,
            commands::open_settings,
            commands::open_explorer,
            commands::add_links,
            commands::get_links,
            commands::update_link,
            commands::delete_link,
            commands::search_tracks_audius_command,
            commands::search_playlists_audius_command,
            commands::get_playlist_tracks_audius_command,
            commands::get_track_stream_url_command,
            commands::get_trending_tracks_command,
            commands::add_profiles,
            commands::update_profiles,
            commands::get_profiles_command,
            commands::delete_profiles,
            commands::add_note_command,
            commands::get_notes_command,
            commands::update_note_command,
            commands::delete_note_command,
            commands::kanban_add_task_command,
            commands::kanban_delete_task_command,
            commands::kanban_update_task_command,
            commands::kanban_list_tasks_command,
            commands::add_event_command,
            commands::get_events_by_date_command,
            commands::delete_event_command,
            commands::update_event_command,
            commands::complete_text,
            commands::add_home_apps,
            commands::get_home_apps,
            commands::delete_home_app,
            commands::launch_home_app,
            commands::open_dashflow_folder,
            commands::save_video,
            commands::drop_games_table,
            
        ])
        .run(tauri::generate_context!())
        .expect("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è");
}


fn init_db() -> Result<(), Box<dyn std::error::Error>> {
    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SQLite (–∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ—é –ë–î)
    let conn = rusqlite::Connection::open("projects.db")?;

    conn.execute(
        "CREATE TABLE IF NOT EXISTS projects (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL,
            path TEXT NOT NULL,
            description TEXT
        )",
        [],
    )?;

    println!("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!");
    Ok(())
}


/// üîÑ **–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π**
async fn update(app: tauri::AppHandle) -> tauri_plugin_updater::Result<()> {
    println!("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...");
    
    let updater = app.updater()?;
    
    let update_check = updater.check().await;
    
    match update_check {
        Ok(Some(update)) => {
            let mut downloaded = 0;

            println!("üîÑ –ù–∞–π–¥–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {:?}", update.version);

            update
                .download_and_install(
                    |chunk_length, content_length| {
                        downloaded += chunk_length;
                        println!("üì• –ó–∞–≥—Ä—É–∂–µ–Ω–æ {}/{}", downloaded, content_length.unwrap_or(0));
                    },
                    || {
                        println!("‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.");
                    },
                )
                .await?;

            println!("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫...");
            app.restart();
        }
        Ok(None) => {
            println!("‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è –≤–µ—Ä—Å–∏—è.");
        }
        Err(e) => {
            println!("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {:?}", e);
        }
    }

    Ok(())
}
