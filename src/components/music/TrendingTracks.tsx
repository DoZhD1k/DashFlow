import { useState, useEffect } from "react";
import { invoke } from "@tauri-apps/api/core";
import { Track } from "../../types/music";
import Loader from "../Loader";

interface TrendingTracksProps {
  setCurrentTrack: React.Dispatch<React.SetStateAction<Track | null>>;
  addToQueue: (track: Track | Track[]) => void;
  selectedGenre: string | null;
  setSelectedGenre: React.Dispatch<React.SetStateAction<string | null>>;
}

export default function TrendingTracks({
  setCurrentTrack,
  addToQueue,
  selectedGenre,
}: TrendingTracksProps) {
  const [tracks, setTracks] = useState<Track[]>([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  // –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–µ–Ω–¥–æ–≤—ã—Ö —Ç—Ä–µ–∫–æ–≤
  const fetchTrendingTracks = async () => {
    setLoading(true);
    setError(null);
    try {
      const response = await invoke("get_trending_tracks_command", {
        genre: selectedGenre || null,
      });

      console.log("üì• –û—Ç–≤–µ—Ç –æ—Ç API:", response); // –õ–æ–≥–∏—Ä—É–µ–º —Å—ã—Ä–æ–π –æ—Ç–≤–µ—Ç

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–≤–µ—Ç –æ–±—ä–µ–∫—Ç–æ–º —Å `data`
      if (!response || typeof response !== "object" || !("data" in response)) {
        throw new Error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç API");
      }

      setTracks(response.data as Track[]);
    } catch (err) {
      setError("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–µ–Ω–¥–æ–≤ üò¢");
      console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Ç—Ä–µ–Ω–¥–æ–≤:", err);
    } finally {
      setLoading(false);
    }
  };

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∂–∞–Ω—Ä–∞
  useEffect(() => {
    fetchTrendingTracks();
  }, [selectedGenre]);

  return (
    <div className="overflow-y-auto custom-scrollbar p-2">
      <h2 className="text-2xl font-bold mb-4">üî• –¢—Ä–µ–Ω–¥—ã</h2>
      {loading ? (
        <div className="flex justify-center items-center h-full min-h-[400px]">
          <Loader />
        </div>
      ) : error ? (
        <p className="text-red-400">{error}</p>
      ) : (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 2xl:grid-cols-6 gap-4">
          {tracks.length > 0 ? (
            tracks.map((track) => (
              <div
                key={track.id}
                className="dark:bg-stone-800 dark:hover:bg-stone-700 hover:bg-gray-200 p-3 rounded-lg shadow-md transition cursor-pointer"
                onClick={() => setCurrentTrack(track)}
              >
                <img
                  src={track.artwork?.["1000x1000"] || "/default-cover.jpg"}
                  alt={track.title}
                  className="w-full h-40 object-cover rounded-md"
                />
                <div className="mt-2">
                  <p className="font-semibold text-sm truncate">
                    {track.title}
                  </p>
                  <p className="text-xs text-gray-400 truncate">
                    {track.user?.name || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å"}
                  </p>
                </div>
                <button
                  onClick={(e) => {
                    e.stopPropagation(); // –ß—Ç–æ–±—ã –Ω–µ –∑–∞–ø—É—Å–∫–∞–ª—Å—è —Ç—Ä–µ–∫ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏
                    addToQueue(track);
                  }}
                  className="mt-2 w-full px-3 py-1 bg-gray-200 dark:bg-stone-700 hover:bg-gray-300 dark:hover:bg-stone-600 rounded-md transition text-sm"
                >
                  ‚ûï –í –æ—á–µ—Ä–µ–¥—å
                </button>
              </div>
            ))
          ) : (
            <p className="text-gray-400">–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤.</p>
          )}
        </div>
      )}
    </div>
  );
}
