// import React, { useState, useRef } from "react";
// import { Video, VideoOff, Save, X, FolderOpen } from "lucide-react";
// import { invoke } from "@tauri-apps/api/core";

// const ScreenRecorderWidget: React.FC = () => {
//   const [isRecording, setIsRecording] = useState(false);
//   const [videoBlob, setVideoBlob] = useState<Blob | null>(null);
//   const mediaRecorderRef = useRef<MediaRecorder | null>(null);
//   const chunksRef = useRef<Blob[]>([]);

//   // üîπ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–∏—Å—å —ç–∫—Ä–∞–Ω–∞
//   const startRecording = async () => {
//     try {
//       // ‚úÖ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∑–∞—Ö–≤–∞—Ç —ç–∫—Ä–∞–Ω–∞ —Å –∞—É–¥–∏–æ
//       const screenStream = await navigator.mediaDevices.getDisplayMedia({
//         video: true,
//         audio: {
//           sampleRate: 48000, // ‚úÖ –í—ã—Å–æ–∫–∞—è —á–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏
//           channelCount: 2, // ‚úÖ –°—Ç–µ—Ä–µ–æ
//           echoCancellation: false, // ‚úÖ –û—Ç–∫–ª—é—á–∞–µ–º –ø–æ–¥–∞–≤–ª–µ–Ω–∏–µ —ç—Ö–∞
//           noiseSuppression: false, // ‚úÖ –û—Ç–∫–ª—é—á–∞–µ–º —à—É–º–æ–ø–æ–¥–∞–≤–ª–µ–Ω–∏–µ
//           autoGainControl: false, // ‚úÖ –û—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∫—É –≥—Ä–æ–º–∫–æ—Å—Ç–∏
//         },
//       });

//       // ‚úÖ –ü–æ–ª—É—á–∞–µ–º –∞—É–¥–∏–æ-—Ç—Ä–µ–∫–∏ (—Å–∏—Å—Ç–µ–º–Ω—ã–π –∑–≤—É–∫)
//       const audioTracks = screenStream.getAudioTracks();
//       if (audioTracks.length === 0) {
//         console.warn("–ó–≤—É–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–º–æ–∂–Ω–æ, –±—Ä–∞—É–∑–µ—Ä –µ–≥–æ –Ω–µ –ø–µ—Ä–µ–¥–∞—ë—Ç.");
//       }

//       // ‚úÖ –°–æ–∑–¥–∞—ë–º MediaStream —Å –≤–∏–¥–µ–æ + –∞—É–¥–∏–æ
//       const combinedStream = new MediaStream([
//         ...screenStream.getVideoTracks(),
//         ...audioTracks,
//       ]);

//       const mediaRecorder = new MediaRecorder(combinedStream, {
//         mimeType: "video/webm; codecs=vp9,opus", // ‚úÖ –í—ã–±–∏—Ä–∞–µ–º –∫–æ–¥–µ–∫ VP9 + Opus (–ª—É—á—à–µ –¥–ª—è –∑–≤—É–∫–∞)
//         audioBitsPerSecond: 192000, // ‚úÖ –ü–æ–≤—ã—à–∞–µ–º –±–∏—Ç—Ä–µ–π—Ç –∞—É–¥–∏–æ (192 kbps)
//         videoBitsPerSecond: 5000000, // ‚úÖ –ü–æ–≤—ã—à–∞–µ–º –±–∏—Ç—Ä–µ–π—Ç –≤–∏–¥–µ–æ (5 Mbps)
//       });

//       chunksRef.current = [];

//       mediaRecorder.ondataavailable = (event) => {
//         if (event.data.size > 0) {
//           chunksRef.current.push(event.data);
//         }
//       };

//       mediaRecorder.onstop = async () => {
//         const blob = new Blob(chunksRef.current, { type: "video/webm" });
//         setVideoBlob(blob);
//       };

//       mediaRecorder.start();
//       mediaRecorderRef.current = mediaRecorder;
//       setIsRecording(true);
//     } catch (err) {
//       console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ —ç–∫—Ä–∞–Ω–∞:", err);
//     }
//   };

//   // üîπ –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø–∏—Å—å
//   const stopRecording = () => {
//     if (mediaRecorderRef.current) {
//       mediaRecorderRef.current.stop();
//       setIsRecording(false);
//     }
//   };

//   // üîπ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∏–¥–µ–æ –≤ C:\Users\–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å\DashFlowVid
//   const saveRecording = async (videoBlob: Blob) => {
//     if (!videoBlob) return;

//     try {
//       const buffer = await videoBlob.arrayBuffer();
//       const uint8Array = new Uint8Array(buffer);

//       // ‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±—ç–∫–µ–Ω–¥
//       const filePath: string = await invoke("save_video", {
//         videoData: Array.from(uint8Array),
//       });

//       alert(`–í–∏–¥–µ–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ ${filePath}`);
//     } catch (error) {
//       console.error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞:", error);
//     }
//   };

//   // üîπ –û—Ç–∫—Ä—ã–≤–∞–µ–º C:\Users\–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å\DashFlowVid

//   const openSaveFolder = async () => {
//     try {
//       await invoke("open_dashflow_folder");
//     } catch (error) {
//       console.error("–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–∞–ø–∫–∏:", error);
//     }
//   };

//   return (
//     <div className="p-6 bg-white dark:bg-stone-800 rounded-xl shadow-lg flex flex-col transition-shadow duration-300">
//       <h3 className="text-lg font-bold mb-3">–ó–∞–ø–∏—Å—å —ç–∫—Ä–∞–Ω–∞</h3>
//       <div className="flex items-center gap-3">
//         <button
//           onClick={openSaveFolder}
//           title="–û—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É"
//           aria-label="–û—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É"
//           className="p-2 bg-gray-500 rounded-md hover:bg-gray-600 transition"
//         >
//           <FolderOpen className="w-5 h-5 text-white" />
//         </button>

//         {isRecording ? (
//           <button
//             onClick={stopRecording}
//             title="–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å"
//             aria-label="–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å"
//             className="p-2 bg-red-500 rounded-md hover:bg-red-600 transition"
//           >
//             <VideoOff className="w-5 h-5 text-white" />
//           </button>
//         ) : (
//           <button
//             onClick={startRecording}
//             title="–ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å"
//             aria-label="–ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å"
//             className="p-2 bg-green-500 rounded-md hover:bg-green-600 transition"
//           >
//             <Video className="w-5 h-5 text-white" />
//           </button>
//         )}

//         {videoBlob && (
//           <>
//             <button
//               onClick={() => saveRecording(videoBlob)} // ‚úÖ –ü–µ—Ä–µ–¥–∞—ë–º videoBlob –ø—Ä–∞–≤–∏–ª—å–Ω–æ
//               title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–∏–¥–µ–æ"
//               aria-label="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–∏–¥–µ–æ"
//               className="p-2 bg-blue-500 rounded-md hover:bg-blue-600 transition"
//             >
//               <Save className="w-5 h-5 text-white" />
//             </button>

// <button
//   onClick={() => setVideoBlob(null)}
//   title="–£–¥–∞–ª–∏—Ç—å –≤–∏–¥–µ–æ"
//   aria-label="–£–¥–∞–ª–∏—Ç—å –≤–∏–¥–µ–æ"
//   className="p-2 bg-gray-500 rounded-md hover:bg-gray-600 transition"
// >
//   <X className="w-5 h-5 text-white" />
// </button>
//           </>
//         )}
//       </div>

//       {videoBlob && (
//         <video
//           className="mt-4 w-full rounded-lg"
//           controls
//           src={URL.createObjectURL(videoBlob)}
//         />
//       )}
//     </div>
//   );
// };

// export default ScreenRecorderWidget;

// import React from "react";
// import { Video, VideoOff, Save, FolderOpen } from "lucide-react";
// import { useScreenRecording } from "../../context/ScreenRecordingContext"; // ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç

// const ScreenRecorderWidget: React.FC = () => {
//   const {
//     isRecording,
//     videoBlob,
//     startRecording,
//     stopRecording,
//     saveRecording,
//     openFolder,
//   } = useScreenRecording();

//   return (
//     <div className="p-6 bg-white dark:bg-stone-800 rounded-xl shadow-lg flex flex-col transition-shadow duration-300">
//       <h3 className="text-lg font-bold mb-3">–ó–∞–ø–∏—Å—å —ç–∫—Ä–∞–Ω–∞</h3>
//       <div className="flex items-center gap-3">
//         <button
//           onClick={openFolder}
//           title="–û—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É"
//           className="p-2 bg-gray-500 rounded-md hover:bg-gray-600 transition"
//         >
//           <FolderOpen className="w-5 h-5 text-white" />
//         </button>

//         {isRecording ? (
//           <button
//             onClick={stopRecording}
//             title="–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å"
//             className="p-2 bg-red-500 rounded-md hover:bg-red-600 transition"
//           >
//             <VideoOff className="w-5 h-5 text-white" />
//           </button>
//         ) : (
//           <button
//             onClick={startRecording}
//             title="–ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å"
//             className="p-2 bg-green-500 rounded-md hover:bg-green-600 transition"
//           >
//             <Video className="w-5 h-5 text-white" />
//           </button>
//         )}

//         {videoBlob && (
//           <button
//             onClick={saveRecording} // ‚úÖ –¢–µ–ø–µ—Ä—å —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
//             title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–∏–¥–µ–æ"
//             className="p-2 bg-blue-500 rounded-md hover:bg-blue-600 transition"
//           >
//             <Save className="w-5 h-5 text-white" />
//           </button>
//         )}
//       </div>

//       {videoBlob && (
//         <video
//           className="mt-4 w-full rounded-lg"
//           controls
//           src={URL.createObjectURL(videoBlob)}
//         />
//       )}
//     </div>
//   );
// };

// export default ScreenRecorderWidget;

import React from "react";
import { Video, VideoOff, Save, FolderOpen, X } from "lucide-react";
import { useScreenRecording } from "../../context/ScreenRecordingContext"; // ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç

const ScreenRecorderWidget: React.FC = () => {
  const {
    isRecording,
    videoBlob,
    startRecording,
    stopRecording,
    saveRecording,
    openFolder,
  } = useScreenRecording();

  return (
    <div className="p-6 bg-white dark:bg-stone-800 rounded-xl shadow-lg flex flex-col transition-shadow duration-300">
      <h3 className="text-lg font-bold mb-3">–ó–∞–ø–∏—Å—å —ç–∫—Ä–∞–Ω–∞</h3>
      <div className="flex items-center gap-3">
        {/* ‚úÖ –ö–Ω–æ–ø–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–∞–ø–∫–∏ */}
        <button
          onClick={openFolder}
          title="–û—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É"
          className="p-2 bg-gray-500 rounded-md hover:bg-gray-600 transition"
        >
          <FolderOpen className="w-5 h-5 text-white" />
        </button>

        {/* ‚úÖ –ö–Ω–æ–ø–∫–∞ –∑–∞–ø–∏—Å–∏ */}
        {isRecording ? (
          <button
            onClick={stopRecording}
            title="–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å"
            className="p-2 bg-red-500 rounded-md hover:bg-red-600 transition"
          >
            <VideoOff className="w-5 h-5 text-white" />
          </button>
        ) : (
          <button
            onClick={startRecording}
            title="–ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å"
            className="p-2 bg-green-500 rounded-md hover:bg-green-600 transition"
          >
            <Video className="w-5 h-5 text-white" />
          </button>
        )}

        {/* ‚úÖ –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è */}
        {videoBlob && (
          <>
            <button
              onClick={saveRecording}
              title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–∏–¥–µ–æ"
              className="p-2 bg-blue-500 rounded-md hover:bg-blue-600 transition"
            >
              <Save className="w-5 h-5 text-white" />
            </button>

            {/* ‚úÖ –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤–∏–¥–µ–æ */}
            <button
              onClick={() => {
                const confirmed = confirm(
                  "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å?"
                );
                if (confirmed) {
                  (document.querySelector("video") as HTMLVideoElement).src =
                    "";
                }
              }}
              title="–£–¥–∞–ª–∏—Ç—å –≤–∏–¥–µ–æ"
              className="p-2 bg-gray-500 rounded-md hover:bg-gray-600 transition"
            >
              <X className="w-5 h-5 text-white" />
            </button>
          </>
        )}
      </div>

      {/* ‚úÖ –í–∏–¥–µ–æ-–ø–ª–µ–µ—Ä */}
      {videoBlob && (
        <video
          className="mt-4 w-full rounded-lg"
          controls
          src={URL.createObjectURL(videoBlob)}
        />
      )}
    </div>
  );
};

export default ScreenRecorderWidget;
